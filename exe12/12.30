头文件:
#pragma once
#include <iostream>
#include <vector>
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <sstream>
using namespace std;

class QueryResult;
class TextQuery
{
public:
	using line_no = vector<string>::size_type;

	TextQuery(ifstream &in);
	QueryResult query(const string&)const;
private:
	shared_ptr<vector<string>> infile;
	map<string, shared_ptr<set<line_no>>> wm;
};
class QueryResult
{
	friend ostream& print(ostream&, const QueryResult &);
public:
	QueryResult(string s, shared_ptr<set<vector<string>::size_type>>p, shared_ptr<vector<string>>f) :sought(s), lines(p), file(f) {}
private:
	string sought;
	shared_ptr<set<vector<string>::size_type>>lines;
	shared_ptr < vector<string>>file;
};

ostream& print(ostream&os, const QueryResult&qr)
{
	os << qr.sought << "occurs " << qr.lines->size() << " 次" << endl;
	for (auto num : *qr.lines)
	{
		os << "\t(line" << num + 1 << ")" << *(qr.file->begin() + num) << endl;
		
	}
	return os;
}

TextQuery::TextQuery(ifstream &in) :infile(new vector<string>)
{
	string text;
	while (getline(in, text))
	{
		infile->push_back(text);
		int n = infile->size() - 1;
		istringstream line(text); //分解单词
		string word;
		while (line >> word)
		{
			auto &lines = wm[word];
			if (!lines)
				lines.reset(new set<line_no>);
			lines->insert(n);
		}
	}
}
QueryResult TextQuery::query(const string&sought)const
{
	static shared_ptr<set<line_no>> nodata(new set<line_no>);
	auto loc = wm.find(sought);
	if (loc == wm.end())
	{
		return QueryResult(sought, nodata, infile);
	}
	else
		return QueryResult(sought, loc->second, infile);
}





cpp:
#include <iostream>
#include "Chartet.h"
using namespace std;

void runQueries(std::ifstream& infile)
{
	TextQuery tq(infile);
	while (true) {
		cout << "enter word to look for, or q to quit: ";
		string s;
		if (!(cin >> s) || s == "q") break;
		print(cout, tq.query(s)) << endl;
	}
}

int main()
{
	ifstream file("1.txt");
	runQueries(file);
	system("pause");
}
