#pragma once
#include <string>
#include <iostream>
#include <stack>
#include <vector>
using namespace std;




int priority(string opt)      //优先级
{
	int p = 0;
	if (opt == "(")p == 1;
	if (opt == "+"||opt=="-")p == 2;
	if (opt == "*"||opt=="/")p == 3;
	return p;
}
void calculate(stack<int> &opdstack, string opt)
{
	if (opt == "+")
	{
		int a = opdstack.top();
		opdstack.pop();
		int b = opdstack.top();
		opdstack.pop();
		int result = a + b;
		opdstack.push(result);
	}
	if (opt == "-")
	{
		int a = opdstack.top();
		opdstack.pop();
		int b = opdstack.top();
		opdstack.pop();
		int result = a - b;
		opdstack.push(result);
	}
	if (opt == "*")
	{
		int a = opdstack.top();
		opdstack.pop();
		int b = opdstack.top();
		opdstack.pop();
		int result = a * b;
		opdstack.push(result);
	}
	if (opt == "/")
	{
		int a = opdstack.top();
		opdstack.pop();
		int b = opdstack.top();
		opdstack.pop();
		int result = a / b;
		opdstack.push(result);
	}

}

int calcuExpression(vector<string>vec)
{
	stack<int> stack_opd;
	stack<string> stack_opt;

	for (auto i = 0; i != vec.size(); ++i)
	{
		string token = vec[i];
		if (token == "+" || token == "-" || token == "*" || token == "/")
		{
			if (stack_opt.size() == 0)
				stack_opt.push(token);
			else
			{
				int token_p = priority(token);
				string top_opt = stack_opt.top();
				int opt_p = priority(top_opt);
				if (token_p > opt_p)
					stack_opt.push(token);
				else
				{
					while (token_p <= opt_p)
					{
						stack_opt.pop();
						calculate(stack_opd, top_opt);
						if (stack_opt.size() > 0)
						{
							top_opt = stack_opt.top();
							opt_p = priority(top_opt);
						}
						else
							break;
						
					}
					stack_opt.push(token);
				}
			}
		}
		else if (token == "(")
		{
			stack_opt.push("(");
	
		}
		else if (token == ")")
		{
			while (stack_opt.top() != "(")
			{
				string top_opt = stack_opt.top();
				calculate(stack_opd, top_opt);
				stack_opt.pop();
			}
			stack_opt.pop();
		}
		else
		{
			stack_opd.push(atoi(token.c_str()));
		} //字符串转整型值
	}
	while (stack_opt.size() != 0)
	{
		string top_opt = stack_opt.top();
		calculate(stack_opd, top_opt);
		stack_opt.pop();
	}
	return stack_opd.top();
}



//参考 用 有错 
